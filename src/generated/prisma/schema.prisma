// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContactUS {
  id          Int      @id @default(autoincrement())
  fullname    String
  workemail   String   @unique
  phonenumber String
  catergory   String
  message     String
  findus      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("subscriber") // Match the actual lowercase table name
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
  HEALTH_STAFF
  FINANCE_STAFF
}

model User {
  id                 String         @id @default(cuid())
  fullName           String
  email              String         @unique
  username           String?        @unique
  password           String?
  contactNumber      String
  schoolName         String
  roleInSchool       String
  studentSize        Int
  role               UserRole       @default(TEACHER)
  isVerified         Boolean        @default(false)
  resendCount        Int            @default(0)
  firstOtpSentAt     DateTime?
  otpSentCount       Int            @default(0) // new
  otpSentWindowStart DateTime? // new
  otp                String?
  otpExpires         DateTime?
  resetToken         String?
  resetTokenExpires  DateTime?
  refreshTokens      RefreshToken[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now()) @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String // hashed token
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
}
